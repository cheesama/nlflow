name: gpu_model_deploy
on: [push]
jobs:
  turn_on_self-host_runner:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/actions/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: GPU machine turn on
        run: |
                az vm start -g ${{ secrets.RESOURCE_GROUP_NAME }} -n ${{ secrets.GPU_VM_NAME }}

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: GPU machine turned on for training deep learning models

  prepare_self-host_runner:
    runs-on: [self-hosted, linux, x64]
    needs: turn_on_self-host_runner
    steps:
      - name: GPU machine turn on
        run: |
            sudo chmod 777 /var/run/docker.sock
            sudo chmod 777 -R ~/actions-runner
            sudo chmod 777 -R /usr/local/
            docker rmi -f $(docker images -a -q)

  domain-classifier:
    runs-on: [self-hosted, linux, x64]
    needs: prepare_self-host_runner
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            pip3 uninstall -y tensorflow && pip3 install -r requirements.txt && pip3 install -r requirements_model.txt
            python3 setup.py install
            cd nlu_flow/sentence_classification/domain_classifier/ludwig_fine_tune && pip3 install -r requirements.txt && python3 train_val.py && cp -r * ../../../../
            
      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - name: dockerize image to ACR
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            ls -al
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/domain_classifier:${{ github.sha }} --build-arg META_ENDPOINT
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/domain_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/domain_classifier:${{ github.sha }}
            kubectl-version: 'latest'
            strategy: canary
            percentage: 50

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  scenario-classifier:
    runs-on: [self-hosted, linux, x64]
    needs: prepare_self-host_runner
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            pip3 uninstall -y tensorflow && pip3 install -r requirements.txt && pip3 install -r requirements_model.txt
            python3 setup.py install
            cd nlu_flow/sentence_classification/scenario_classifier/ludwig_fine_tune && pip3 install -r requirements.txt && python3 train_val.py && cp -r * ../../../../
            
      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - name: dockerize image to ACR
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            ls -al
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/scenario_classifier:${{ github.sha }} --build-arg META_ENDPOINT
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/scenario_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/scenario_classifier:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  slang-classifier:
    runs-on: [self-hosted, linux, x64]
    needs: prepare_self-host_runner
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            pip3 uninstall -y tensorflow && pip3 install -r requirements.txt && pip3 install -r requirements_model.txt
            python3 setup.py install
            cd nlu_flow/sentence_classification/slang_classifier/ludwig_fine_tune && pip3 install -r requirements.txt && python3 train_val.py && cp -r * ../../../../
            
      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - name: dockerize image to ACR
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            ls -al
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }} --build-arg META_ENDPOINT
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  chitchat-response-generator:
    runs-on: [self-hosted, linux, x64]
    needs: prepare_self-host_runner
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
            META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            sudo apt-get update && sudo apt-get install -y python-setuptools cmake
            pwd
            rm -rf nlu_flow/response_generation/chitchat_response_generation/kogpt_model/KoGPT2-chatbot/model_chp
            pip3 install --user --ignore-installed PyYAML
            pip3 install --user -r requirements.txt && pip3 install --user -r requirements_model.txt
            python setup.py install
            cd nlu_flow/response_generation/chitchat_response_generation/kogpt_model && \
            pip3 install --user -r requirements.txt && \
            pip3 install --user git+http://github.com/SKT-AI/KoGPT2 && cd KoGPT2-chatbot && \
            CUDA_VISIBLE_DEVICES=0 python train_torch.py --gpus 1 --train --max_epochs 3 && \
            cd .. && pwd && cp -r * ../../../../ && pwd && ls

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      #Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat-response-generator:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat-response-generator:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat-response-generator:${{ github.sha }}
            kubectl-version: 'latest'

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: chitchat-response-generator training & deploy done
    
  shutdown_self-host_runner:
    needs: [chitchat-response-generator, domain-classifier, slang-classifier, scenario-classifier]
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/actions/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: GPU machine turn off
        run: |
            az vm deallocate -g ${{ secrets.RESOURCE_GROUP_NAME }} -n ${{ secrets.GPU_VM_NAME }}

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: GPU machine turned off after training chitchat-response-generator


