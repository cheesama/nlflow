name: cpu_model_deploy
on: [push]
jobs:
  domain-classifier:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            apt-get update
            apt-get install -y python3-dev
            pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements_model.txt
            python setup.py install
            cd nlu_flow/sentence_classification/domain_classifier && pip install -r requirements.txt && python sklearn_domain_classifier.py && cp -r * ../../../
            # Write your CML report
            cml-send-comment report.md
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/domain_classifier
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/domain_classifier:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/domain_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/domain_classifier:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  chitchat-classifier:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            apt-get update
            apt-get install -y python3-dev
            pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements_model.txt
            python setup.py install
            cd nlu_flow/sentence_classification/chitchat_classifier/sklearn_svm && pip install -r requirements.txt && python sklearn_chitchat_classifier.py && cp -r * ../../../../
            # Write your CML report
            cml-send-comment report.md
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/chitchat_classifier
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat_classifier:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat_classifier:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  crf-entity-extractor:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            apt-get update
            apt-get install -y python3-dev
            pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements_model.txt
            python setup.py install
            cd nlu_flow/sequential_labeling/crf_entity_extractor && pip install -r requirements.txt && python crf_entity_extractor.py && cp -r * ../../../
            # Write your CML report
            cml-send-comment report.md
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/entity_extractor
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/entity_extractor:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/entity_extractor:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/entity_extractor:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  faq-classifier:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            apt-get update
            apt-get install -y python3-dev
            pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements_model.txt
            python setup.py install
            cd nlu_flow/sentence_classification/faq_classifier && pip install -r requirements.txt && python sklearn_faq_classifier.py && cp -r * ../../../
            # Write your CML report
            cml-send-comment report.md
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/faq_classifier
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/faq_classifier:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/faq_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/faq_classifier:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  pre-analyzer:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: copy files
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            cd nlu_flow/preprocessor/pre_analyzer && cp -r * ../../../
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/pre-analyzer
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: set env variables
        run: |
            echo ::set-env name=META_ENDPOINT::${{ secrets.META_ENDPOINT }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/pre-analyzer:${{ github.sha }} --build-arg META_ENDPOINT
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/pre-analyzer:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/pre-analyzer:${{ github.sha }}
            kubectl-version: 'latest'

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: pre-analyzer deployed!

  rule-entity-extractor:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: copy files
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            cd nlu_flow/sequential_labeling/rule_entity_extractor && cp -r * ../../../
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/rule-entity-extractor
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: set env variables
        run: |
            echo ::set-env name=META_ENDPOINT::${{ secrets.META_ENDPOINT }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/rule-entity-extractor:${{ github.sha }} --build-arg META_ENDPOINT
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/rule-entity-extractor:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/rule-entity-extractor:${{ github.sha }}
            kubectl-version: 'latest'

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: rule-entity-extractor deployed!

  scenario-classifier:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            apt-get update
            apt-get install -y python3-dev
            pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements_model.txt
            python setup.py install
            cd nlu_flow/sentence_classification/scenario_classifier && pip install -r requirements.txt && python sklearn_scenario_classifier.py && cp -r * ../../../
            # Write your CML report
            cml-send-comment report.md
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/scenario_classifier
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/scenario_classifier:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/scenario_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/scenario_classifier:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  slang-classifier:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            apt-get update
            apt-get install -y python3-dev
            pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements_model.txt
            python setup.py install
            cd nlu_flow/sentence_classification/slang_classifier && pip install -r requirements.txt && python sklearn_slang_classifier.py && cp -r * ../../../
            # Write your CML report
            cml-send-comment report.md
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/slang_classifier
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}

  train_chitchat-response-generator:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
            META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            apt-get update
            apt-get install -y python3-dev
            pip install -r requirements.txt && pip install -r requirements_model.txt
            python setup.py install
            cd nlu_flow/response_generation/chitchat_response_generation/kogpt_model && \
            pip install -r requirements.txt && \
            pip install git+http://github.com/SKT-AI/KoGPT2 && cd KoGPT2-chatbot && \
            python train_torch.py --train --max_epochs 3 && \
            cd .. && cp -r * ../../../

      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/chitchat-response-generator
            tag_with_ref: true

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      #Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat-response-generator:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat-response-generator:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/chitchat-response-generator:${{ github.sha }}
            kubectl-version: 'latest'

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: chitchat-response-generator training & deploy done