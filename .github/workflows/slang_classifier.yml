name: slang_classifier_model_deploy
on: [push]
jobs:
  run:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml-py3:latest
    steps:
      - uses: actions/checkout@v2
      - name: model_training
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          META_ENDPOINT: ${{ secrets.META_ENDPOINT }}
        run: |
            apt-get update
            apt-get install -y python3-dev
            pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements_model.txt
            python setup.py install
            cd nlu_flow/sentence_classification/slang_classifier && pip install -r requirements.txt && python sklearn_slang_classifier.py && cp -r * ../../../
            # Write your CML report
            cml-send-comment report.md
      - name: Push Docker image to GitHub Packages
        uses: docker/build-push-action@v1
        with:
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            registry: docker.pkg.github.com
            repository: cheesama/nlu_flow/slang_classifier
            tag_with_ref: true
            # docker login https://docker.pkg.github.com -u USERNAME --password-stdin

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
            docker build . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }}

      - uses: azure/k8s-set-context@v1
        with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        id: setcontext

      - uses: Azure/k8s-deploy@v1
        with:
            namespace: ${{ secrets.NAMESPACE }}
            manifests: |
                manifests/deployment.yaml
                manifests/service.yaml
            images: ${{ secrets.REGISTRY_NAME }}.azurecr.io/slang_classifier:${{ github.sha }}
            kubectl-version: 'latest'

      - name: set report as env
        run: |
            echo ::set-env name=REPORT::$(cat report.md)

      - name: Slack notification
        uses: rtCamp/action-slack-notify@master
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_MESSAGE: ${{ env.REPORT }}
